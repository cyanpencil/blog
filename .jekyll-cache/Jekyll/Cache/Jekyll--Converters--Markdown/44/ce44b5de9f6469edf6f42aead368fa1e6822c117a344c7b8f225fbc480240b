I"¢"<h1 id="whatsapp-smali-injection-for-n00bz">Whatsapp smali injection for n00bz</h1>

<p>I made this to solve a challenge while interviewing for a security IT company, here is a short writeup:</p>

<h2 id="introduction">Introduction</h2>

<p>The task of the project was about finding an obfuscated app on the play store, modifying it such that it would notify another app whenever it was opened.</p>

<p>I did not really have a quick way to check wheter an app on the play store was obfuscated or not, so I decided to choose an app that I knew for sure had at least some kind of obfuscation, and that app is <em>Whatsapp Messenger</em>.</p>

<p>The apk for ‚ÄúWhatsapp Messenger‚Äù I got is version 2.20.123, <strong>x86</strong> architecture (because that‚Äôs the architecture of the emulator I am currently running)</p>

<h2 id="finding-an-injection-spot">Finding an injection spot</h2>

<p>I started by decompiling the apk down to the smali code using <code class="language-plaintext highlighter-rouge">apktool</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apktool d -r -f com.whatsapp...
</code></pre></div></div>

<p>Then, I started inspecting the decompiled smali.
Unfortunately, <em>Whatsapp</em> is not a small app by any means, with more than 13k smali classes:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find . -name "*.smali" | wc -l
13666
</code></pre></div></div>
<p>Furthermore, as you may see from the screenshot below, many of the classes and methods names were obfuscated. Some were implemented in native libraries, too.</p>

<p><img src="https://i.imgur.com/YjZezrF.png" alt="" /></p>

<p>It was not easy for me to find a good spot to inject code in. Ideally, I would have needed a function that would be executed every time the app is opened, but the mangled names were making this difficult.</p>

<p>For some time I tried tracing all the functions executed by Whatsapp by installing <code class="language-plaintext highlighter-rouge">frida-server</code> on the emulator and starting Whatsapp with <code class="language-plaintext highlighter-rouge">frida-trace</code>, but I did not get very far with that.</p>

<p>After a while though I realized that <em>not all</em> methods can be obfuscated, as there are some which are required to have a special name by Java or Android, such as <code class="language-plaintext highlighter-rouge">toString()</code>, <code class="language-plaintext highlighter-rouge">constructor()</code>, etc.  So, I started looking for methods like this that could indicate the start of an Activity, and soon I found out that <code class="language-plaintext highlighter-rouge">onCreate()</code> was not obfuscated too!</p>

<p>So, after running</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep -R ".method.*onCreate"
</code></pre></div></div>
<p>I found out about <code class="language-plaintext highlighter-rouge">com/whatsapp/Main.smali</code>, and decided to test if that was a suitable spot for injection.
I am not comfortable in smali, so I decided to look online and found out on a stackoverflow question that the best way was to display a Toast with the following smali:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const-string v0, "Hack the plan3t!"
const/4 v1, 0x1
invoke-static {p0, v0, v1}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
move-result-object v0
invoke-virtual {v0}, Landroid/widget/Toast;-&gt;show()V
</code></pre></div></div>
<p>I inserted the code and recompiled the apk with:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apktool b com.whatsapp
keytool -genkey -v -keystore my-release-key.keystore -alias test -keyalg RSA -validity 10000
jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore com.whatsapp.apk test
</code></pre></div></div>
<p>I had to read about smali registers and how do they work because I kept getting crashes, but after a few small adjustments to avoid using any registers the original <code class="language-plaintext highlighter-rouge">onCreate()</code> was using I got it to work!</p>

<p><img src="https://i.imgur.com/zVHVfzn.png" alt="" /></p>

<h2 id="the-receiver-app">The receiver app</h2>

<p>Now, I had to code the app that kept the counter. I used one of the examples from <a href="https://github.com/android/user-interface-samples"></a> to get started and I modified it to display a simple TextView.</p>

<p>I then studied a bit about available IPC methods in Android, and decided that the fastest one to implement was a <code class="language-plaintext highlighter-rouge">BroadcastReceiver</code> that listens on Intents from <em>Whatsapp</em>.</p>

<p>Here is the code of the app that I properly named <em>Whatsapp Stalker</em>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class MyReceiver extends BroadcastReceiver {
	int counter;
	TextView t;

	public MyReceiver(TextView t) {
		counter = 0;
		this.t = t;
	}

	@Override
	public void onReceive(Context context, Intent intent) {
		counter ++;
		t.setText("Number of times Whatsapp was opened: " + counter);
	}
}

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sample_main);
		TextView textViewResource = (TextView) findViewById(R.id.text_html_resource);
		textViewResource.setText( "Number of times Whatsapp was opened: " + 0); 

		IntentFilter filter = new IntentFilter();
		filter.addAction("com.stalker.WHATSAPP_OPENED");
		MyReceiver myReceiver = new MyReceiver(textViewResource);
		registerReceiver(myReceiver, filter);
	}
}
</code></pre></div></div>
<p>The app is really spartan, but it does its job.</p>

<h2 id="the-injection">The injection</h2>

<p>Now I had to come up with the smali code to send an intent to the <em>Whatsapp Stalker</em>.
Again, I am not very knowleadgeable on smali, and I really wanted to get it to work
without too much trial and error, so I decided to cheat a little bit: I just wrote the normal
Java code to send an intent in an empty app, then compiled it, decompiled my own app with apktool, and 
just <em>copy pasted</em> the relevant smali code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new-instance v8, Landroid/content/Intent;
invoke-direct {v8}, Landroid/content/Intent;-&gt;&lt;init&gt;()V

const-string v7, "com.stalker.WHATSAPP_OPENED"

invoke-virtual {v8, v7}, Landroid/content/Intent;-&gt;setAction(Ljava/lang/String;)Landroid/content/Intent;


const-string v7, "com.example.whatsappstalker"

invoke-virtual {v8, v7}, Landroid/content/Intent;-&gt;setPackage(Ljava/lang/String;)Landroid/content/Intent;

invoke-virtual {p0, v8}, Lcom/example/whatsappstalker/MainActivity;-&gt;sendBroadcast(Landroid/content/Intent;)V
</code></pre></div></div>

<p>I know this is not the most elegant solution, but it works!</p>

<p>I just had to adjust some register names and package paths, but in the end I got what I wanted:</p>

<p><img src="https://i.imgur.com/L9IK4p2.png" alt="" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Since I was already very late with the submission, I did not put much effort into making the injection discreet or the receiver app fancy, I just wanted to get a proof of concept.</p>

<p>Some limitations of my current approach, that I could have fixed with more time:</p>
<ul>
  <li>The receiver app only increases the counter while it is open in the background. It would have been a better solution to implement it as a Service that is always on in the background.</li>
  <li>The receiver app reset the counter everytime it is closed. This could be fixed by saving it to <code class="language-plaintext highlighter-rouge">Preferences</code> or something similar.</li>
  <li>The count only get increased when <em>Whatsapp</em> is created - that means that if it is open in the background you need to close it and open it again to increase the counter; perhaps it would have been more interesting if it increased the counter every time the user switched to <em>Whatsapp</em>?</li>
  <li>The <code class="language-plaintext highlighter-rouge">sendBroadcast(Intent)</code> is not the most discreet way to talk to another application - I restricted the listening of such Intent only to applications that have the package ‚Äúcom.example.whatsappstalker‚Äù, but it could still be improved a lot</li>
</ul>

<p>Thanks for taking the time to read this!
<em>Luca Di Bartolomeo</em></p>

:ET