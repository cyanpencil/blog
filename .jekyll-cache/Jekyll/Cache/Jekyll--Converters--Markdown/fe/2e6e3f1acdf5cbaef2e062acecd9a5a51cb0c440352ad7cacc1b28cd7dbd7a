I"|0<h1 id="get-notified-on-telegram-on-every-ssh-login">Get notified on Telegram on every ssh login</h1>

<center>
<img src="/blog/assets/images/telegram_login_alert.png" width="70%" align="middle" />
</center>

<h2 id="step-1-create-a-telegram-bot">Step 1: Create a telegram bot</h2>

<ul>
  <li>Open up telegram, search <code class="language-plaintext highlighter-rouge">@botfather</code> and start a conversation with it</li>
  <li>Type <code class="language-plaintext highlighter-rouge">/newbot</code> and follow the instructions to choose a username for your bot
(with which you can search for your bot with @username) and a screen name 
(just the name that will appear at the top of the conversation with your bot.</li>
  <li>Save the <strong>token</strong> generated by <code class="language-plaintext highlighter-rouge">@botfather</code> somewhere</li>
  <li>Look up your bot in the Telegram search (@username) and start a conversation with
it, by sending a random message (<em>this step is important, you can’t skip it. Telegram
does not allow bots to send messages to anyone; a conversation must have been
started already</em>).</li>
  <li>Finally, you must know what is your telegram <strong>chat ID</strong> to receive messages. Start a conversation in Telegram with <code class="language-plaintext highlighter-rouge">@getmyid_bot</code>; you will receive your personal chat ID.</li>
</ul>

<h2 id="step-2-test-if-the-bot-is-working">Step 2: Test if the bot is working</h2>

<p>You can send messages using the Telegram HTTP API; it’s particularly useful because
we can call that from the command line using <code class="language-plaintext highlighter-rouge">curl</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="s2">"https://api.telegram.org/bot</span><span class="nv">$KEY</span><span class="s2">/sendMessage"</span> <span class="nt">-d</span> <span class="s2">"chat_id=</span><span class="nv">$USERID</span><span class="s2">&amp;text=hello world!"</span>
</code></pre></div></div>
<p>where <code class="language-plaintext highlighter-rouge">$KEY</code> is your bot token and <code class="language-plaintext highlighter-rouge">$USERID</code> is your telegram chat id you got before.</p>

<p>You should receive on telegram a message from your newly created bot saying “hello world!”</p>

<h2 id="step-3-script-to-send-messages-to-you-from-the-bot">Step 3: Script to send messages to you from the bot</h2>

<p>Now let’s set up a script that gathers information on a ssh client and sends a message
to you giving various info such as the user, the IP, and sometimes even the location
of the client.
We will use the environment variable <code class="language-plaintext highlighter-rouge">$SSH_CONNECTION</code>, that contains the client IP and port.
This variable is set up each time by <code class="language-plaintext highlighter-rouge">sshd</code> for each tty it allocates (that means, for each
  different connection we will have a different variable in our environment).
We will also make a request to <code class="language-plaintext highlighter-rouge">https://ipinfo.io</code>, which will give us information such
as the AS number and (sometimes) the geolocation of a given IP.
The following script will send a message to you like the one in the screenshot above:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">USERID</span><span class="o">=</span><span class="s2">"&lt;your-chat-id&gt;"</span>
<span class="nv">KEY</span><span class="o">=</span><span class="s2">"&lt;your-bot-token&gt;"</span>

<span class="nv">URL</span><span class="o">=</span><span class="s2">"https://api.telegram.org/bot</span><span class="nv">$KEY</span><span class="s2">/sendMessage"</span>
<span class="nv">DATE_EXEC</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s2">"+%d %b %Y %H:%M"</span><span class="si">)</span><span class="s2">"</span> 
<span class="nv">TMPFILE</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">mktemp</span><span class="si">)</span><span class="s2">"</span> 
<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$SSH_CONNECTION</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$TMUX</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> <span class="o">!</span> <span class="nv">$PAM_TYPE</span> <span class="o">=</span>~ <span class="s2">"close_session"</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then 
	</span><span class="nv">IP</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SSH_CONNECTION</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span> <span class="c"># get client IP address.</span>
	<span class="nv">HOSTNAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-f</span><span class="si">)</span> 
	<span class="nv">IPADDR</span><span class="o">=</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-i</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span> <span class="c"># get server IP address</span>
	curl https://ipinfo.io/<span class="nv">$IP</span> <span class="nt">-s</span> <span class="nt">-o</span> <span class="nv">$TMPFILE</span> <span class="c"># info on client IP (json)</span>
	<span class="nv">CITY</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$TMPFILE</span> | <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'s/^  "city":[[:space:]]*//p'</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">,"</span> <span class="s2">"  "</span><span class="si">)</span> 
	<span class="nv">REGION</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$TMPFILE</span> | <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'s/^  "region":[[:space:]]*//p'</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">,"</span> <span class="s2">"  "</span><span class="si">)</span>
	<span class="nv">COUNTRY</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$TMPFILE</span> | <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'s/^  "country":[[:space:]]*//p'</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">,"</span> <span class="s2">"  "</span><span class="si">)</span>
	<span class="nv">ORG</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$TMPFILE</span> | <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'s/^  "org":[[:space:]]*//p'</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">,"</span> <span class="s2">"  "</span><span class="si">)</span>
	<span class="nv">TEXT</span><span class="o">=</span><span class="s2">"[</span><span class="nv">$PAM_USER</span><span class="s2">]</span><span class="se">\n</span><span class="nv">$DATE_EXEC</span><span class="se">\n</span><span class="nv">$PAM_USER</span><span class="s2"> logged in to </span><span class="nv">$HOSTNAME</span><span class="s2"> (</span><span class="nv">$IPADDR</span><span class="s2">) </span><span class="se">\n</span><span class="s2">ip:</span><span class="nv">$IP</span><span class="s2"> </span><span class="se">\n</span><span class="s2">country: </span><span class="nv">$COUNTRY</span><span class="se">\n</span><span class="s2">city: </span><span class="nv">$CITY</span><span class="s2"> </span><span class="se">\n</span><span class="s2">region: </span><span class="nv">$REGION</span><span class="s2"> </span><span class="se">\n</span><span class="s2">org:</span><span class="nv">$ORG</span><span class="s2">"</span>
	<span class="nv">TEXT</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$TEXT</span> | <span class="nb">sed</span> <span class="s2">"s/</span><span class="se">\\\n</span><span class="s2">/%0a/g"</span><span class="si">)</span>
	curl <span class="nt">-s</span> <span class="nt">--max-time</span> 10 <span class="nt">-d</span> <span class="s2">"chat_id=</span><span class="nv">$USERID</span><span class="s2">&amp;disable_web_page_preview=1&amp;text=</span><span class="nv">$TEXT</span><span class="s2">"</span> <span class="nv">$URL</span> <span class="o">&gt;</span> /dev/null
	<span class="nb">rm</span> <span class="nv">$TMPFILE</span> <span class="c">#clean up after</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>Substitute the values of USERID and KEY variables with your chat id and bot token you got before.
After saving, make sure that the script has the right permissions: <code class="language-plaintext highlighter-rouge">chmod 705 your_script.sh</code> (readable and executable by everyone).</p>

<h2 id="step-4-execute-script-on-every-ssh-login">Step 4: Execute script on every ssh login</h2>

<p>There are various ways we can call the script:</p>

<h3 id="1-use-the-pam_exec-module">1. Use the pam_exec module</h3>

<p>Open the file <code class="language-plaintext highlighter-rouge">/etc/pam.d/sshd</code> and append the following line at the end:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>session optional pam_exec.so /&lt;path_to_yourscript.sh&gt;
</code></pre></div></div>

<h3 id="2-inside-sshd-config">2. Inside sshd config</h3>

<p>Open the file <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code> and append the following line:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ForceCommand /&lt;path_to_yourscript.sh&gt;; bash -c ${SSH_ORIGINAL_COMMAND:-bash -il}
</code></pre></div></div>
<p>We force the execution of our alert script and then continue execution to the
given command if it was provided, or to the login shell (<code class="language-plaintext highlighter-rouge">bash -il</code>) if the variable
<code class="language-plaintext highlighter-rouge">$SSH_ORIGINAL_COMMAND</code> is not set.</p>

<p>You can set up more fine-grained checks on when sending the telegram alert this
way.  Suppose your server is inside a VPN, but it’s also exposed to the
internet. Let’s say you want to be alerted only when someone logs in from the
internet. Append the following lines to <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Match Address *,!10.0.0.0/24
	PermitRootLogin no
	ForceCommand /&lt;path_to_yourscript.sh&gt;; bash -c ${SSH_ORIGINAL_COMMAND:-bash -il}
</code></pre></div></div>

<p>The line <code class="language-plaintext highlighter-rouge">Match Address *,!10.0.0.0/24</code> will catch every client that is <em>not</em>
connected through your VPN (10.0.0.0/24). We disable root logins from outside
our VPN, and ensure that the first command on every successful ssh
connection will be executing your script.</p>

<p>You can find much more information on how to set <code class="language-plaintext highlighter-rouge">Match</code> rules and other useful
commands inside <code class="language-plaintext highlighter-rouge">man sshd_config</code>.</p>

<h3 id="3-inside-profiled">3. Inside profile.d</h3>

<p>If you’re using a Debian-like system, you can just copy your script inside
the <code class="language-plaintext highlighter-rouge">/etc/profile.d</code> directory. It will be automatically executed on every login!</p>

<hr />
<p>Adapted and expanded from: <a href="https://8192.one/post/ssh_login_notification_withtelegram/">8192.one’s blog</a></p>
:ET