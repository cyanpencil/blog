I"75<h1 id="cool-bash-stuff-with-ansi-escape-codes">Cool bash stuff with ANSI escape codes</h1>

<p>Let’s see a few fun stuff you can do with a bit of bash and ANSI escape codes</p>

<h2 id="example-1-ascii-progress-bar">Example #1: ASCII Progress bar</h2>

<p>You know a script is <em>cool</em> when it shows a progress bar.
And you write only <em>cool</em> scripts, right?</p>

<p>For this, we don’t need fancy stuff, just the <code class="language-plaintext highlighter-rouge">\r</code> char will do the magic for us. 
Let’s also assume you have a <code class="language-plaintext highlighter-rouge">percentage</code> variable lying around with display 
the progress of whatever unoptimized thing you’re doing as an integer from 0 to 100.</p>

<p>Python is our friend, and lets us roll with this one-liner:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\r</span><span class="s">['</span> <span class="o">+</span> <span class="s">'#'</span><span class="o">*</span><span class="n">percentage</span> <span class="o">+</span> <span class="s">' '</span><span class="o">*</span><span class="p">(</span><span class="mi">100</span> <span class="o">-</span> <span class="n">percentage</span><span class="p">)</span> <span class="o">+</span> <span class="s">']'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>

<p>Pretty straightforward, right? But I hear you, you’re not using python, you’re making
a script, so take this bash two-liner:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nv">bar</span><span class="o">=</span><span class="si">$(</span><span class="nb">printf</span> <span class="s2">"%100s"</span> | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">'#'</span><span class="si">)</span>
<span class="gp">$</span><span class="w"> </span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\r</span><span class="s2">[</span><span class="k">${</span><span class="nv">bar</span>:0:<span class="nv">$percentage</span><span class="k">}</span><span class="s2">%</span><span class="k">$((</span><span class="m">100</span> <span class="o">-</span> percentage<span class="k">))</span><span class="s2">s]"</span>
</code></pre></div></div>
<p>Ok so there’s some bash <em>fancy stuff</em>. Let’s decompose that a bit:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">$(printf "%100s" | tr ' ' '#')</code> - makes a string with 100 spaces, and replaces them with <code class="language-plaintext highlighter-rouge">#</code></li>
  <li><code class="language-plaintext highlighter-rouge">${bar:0:$percentage}</code> bash’s magic variable substitution, works like python’s <code class="language-plaintext highlighter-rouge">bar[0:percentage]</code></li>
  <li><code class="language-plaintext highlighter-rouge">%$((100 - percentage))s</code> printing the remaining spaces until we get to a length of 100</li>
</ul>

<p> </p>

<p>For specimen demonstration purposes, I stuck that in a loop for you to show it off:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">bar</span><span class="o">=</span><span class="si">$(</span><span class="nb">printf</span> <span class="s2">"%100s"</span> | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">'#'</span><span class="si">)</span>
<span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..100<span class="o">}</span><span class="p">;</span> <span class="k">do
	</span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\r</span><span class="s2">[</span><span class="k">${</span><span class="nv">bar</span>:0:<span class="nv">$i</span><span class="k">}</span><span class="s2">%</span><span class="k">$((</span><span class="m">100</span> <span class="o">-</span> i<span class="k">))</span><span class="s2">s]"</span>
	<span class="nb">sleep </span>0.03
<span class="k">done</span>
</code></pre></div></div>
<p>Results:</p>

<center>
<img src="/blog/assets/images/bash_progress.gif" width="60%" align="middle" />
</center>

<h2 id="example-2-bash-selection-menu">Example #2: bash selection menu</h2>

<p>Using the escape sequence<code class="language-plaintext highlighter-rouge">\x1b[y;xH</code> we can move the cursor to the <code class="language-plaintext highlighter-rouge">(x,y)</code> coordinates in the terminal.
We also know that <code class="language-plaintext highlighter-rouge">\e[?25l</code> hides the cursor and <code class="language-plaintext highlighter-rouge">\e[?25h</code> shows it back.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># get terminal size</span>
<span class="nb">read </span>LINES COLUMNS &lt; &lt;<span class="o">(</span><span class="nb">stty </span>size<span class="o">)</span>

<span class="c"># available selections (colon separated)</span>
<span class="nv">IFS</span><span class="o">=</span>: <span class="nb">read</span> <span class="nt">-a</span> text <span class="o">&lt;&lt;&lt;</span> <span class="s2">"selection #1:selection #2:selection #3:selection #4"</span> 
<span class="nv">w</span><span class="o">=</span>30
<span class="nv">h</span><span class="o">=</span><span class="k">$((${#</span><span class="nv">text</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span>
<span class="nv">x</span><span class="o">=</span><span class="k">$((</span>COLUMNS/2 <span class="o">-</span> w/2<span class="k">))</span>
<span class="nv">y</span><span class="o">=</span><span class="k">$((</span>LINES/2 <span class="o">-</span> h/2<span class="k">))</span>

<span class="nv">sel</span><span class="o">=</span>0

<span class="c"># hide cursor</span>
<span class="nb">printf</span> <span class="s2">"</span><span class="se">\e</span><span class="s2">[?25l"</span>

<span class="c"># line (bool vert, int x, int y, int len)</span>
<span class="k">function </span>line <span class="o">()</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">==</span> v <span class="o">]]</span><span class="p">;</span> <span class="k">then
		for</span> <span class="o">((</span> i <span class="o">=</span> 1<span class="p">;</span> i &lt; <span class="nv">$4</span><span class="p">;</span> i++<span class="o">))</span><span class="p">;</span> <span class="k">do
			</span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span><span class="nv">$3</span> <span class="o">+</span> <span class="nv">$i</span><span class="k">))</span><span class="s2">;</span><span class="k">$((</span><span class="nv">$2</span><span class="k">))</span><span class="s2">H|"</span>
		<span class="k">done
	else 
		for</span> <span class="o">((</span> i <span class="o">=</span> 1<span class="p">;</span> i &lt; <span class="nv">$4</span><span class="p">;</span> i++<span class="o">))</span><span class="p">;</span> <span class="k">do
			</span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span><span class="nv">$3</span><span class="k">))</span><span class="s2">;</span><span class="k">$((</span><span class="nv">$2</span> <span class="o">+</span> <span class="nv">$i</span><span class="k">))</span><span class="s2">H-"</span>
		<span class="k">done
	fi</span>
<span class="o">}</span>

<span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do</span>
	<span class="c"># erase screen</span>
	<span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[2J"</span>

	<span class="c"># box borders</span>
	line h <span class="nv">$x</span>       <span class="nv">$y</span>       <span class="nv">$w</span>
	line h <span class="nv">$x</span>       <span class="k">$((</span>y+h<span class="k">))</span> <span class="nv">$w</span>
	line v <span class="nv">$x</span>       <span class="nv">$y</span>       <span class="nv">$h</span>
	line v <span class="k">$((</span>x+w<span class="k">))</span> <span class="nv">$y</span>       <span class="nv">$h</span>

	<span class="c"># box corners</span>
	<span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y+h<span class="k">))</span><span class="s2">;</span><span class="k">$((</span>x+w<span class="k">))</span><span class="s2">H+"</span>
	<span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y<span class="k">))</span><span class="s2">;</span><span class="k">$((</span>x+w<span class="k">))</span><span class="s2">H+"</span>
	<span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y+h<span class="k">))</span><span class="s2">;</span><span class="k">$((</span>x<span class="k">))</span><span class="s2">H+"</span>
	<span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y<span class="k">))</span><span class="s2">;</span><span class="k">$((</span>x<span class="k">))</span><span class="s2">H+"</span>

	<span class="c"># display text selections</span>
	<span class="k">for</span> <span class="o">((</span>i <span class="o">=</span> 0<span class="p">;</span> i &lt; <span class="k">${#</span><span class="nv">text</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> i++<span class="o">))</span><span class="p">;</span> <span class="k">do
		</span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y+i+1<span class="k">))</span><span class="s2">;</span><span class="k">$((</span>x+w/2-<span class="k">${#</span><span class="nv">text</span><span class="p">[i]</span><span class="k">}</span><span class="o">/</span><span class="m">2</span><span class="k">))</span><span class="s2">H"</span>
		<span class="k">if</span> <span class="o">[[</span> <span class="nv">$sel</span> <span class="nt">-eq</span> <span class="nv">$i</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
			</span><span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[41;1m</span><span class="k">${</span><span class="nv">text</span><span class="p">[i]</span><span class="k">}</span><span class="se">\x</span><span class="s2">1b[0m"</span>
		<span class="k">else
			</span><span class="nb">printf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">text</span><span class="p">[i]</span><span class="k">}</span><span class="s2">"</span>
		<span class="k">fi
	done</span>

	<span class="c"># read only one char of input</span>
	<span class="nb">read</span> <span class="nt">-sn1</span> input
	<span class="k">case</span> <span class="nv">$input</span> <span class="k">in
		</span>j<span class="p">)</span>  <span class="nv">sel</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span>sel+1<span class="o">)</span> <span class="o">%</span> <span class="k">${#</span><span class="nv">text</span><span class="p">[@]</span><span class="k">}))</span> <span class="p">;;</span>
		k<span class="p">)</span>  <span class="nv">sel</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span>sel-1<span class="o">)</span> <span class="o">%</span> <span class="k">${#</span><span class="nv">text</span><span class="p">[@]</span><span class="k">}))</span>
			<span class="k">if</span> <span class="o">[[</span> sel <span class="nt">-lt</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then </span><span class="nv">sel</span><span class="o">=</span>3<span class="p">;</span> <span class="k">fi</span> <span class="p">;;</span>
		<span class="s2">""</span><span class="p">)</span> <span class="nb">printf</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">1b[</span><span class="k">$((</span>y+h+1<span class="k">))</span><span class="s2">;0H"</span>
			<span class="nb">echo</span> <span class="s2">"You selected </span><span class="k">${</span><span class="nv">text</span><span class="p">[</span><span class="nv">$sel</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span>
			<span class="nb">break</span> <span class="p">;;</span>
		q<span class="p">)</span>  <span class="nb">break</span> <span class="p">;;</span>
	<span class="k">esac</span>
<span class="k">done</span>

<span class="c"># show cursor when we're done</span>
<span class="nb">printf</span> <span class="s2">"</span><span class="se">\e</span><span class="s2">[?25h"</span>
</code></pre></div></div>

<p>This is the result, moving the selection up and down with <code class="language-plaintext highlighter-rouge">j</code> and <code class="language-plaintext highlighter-rouge">k</code> keys:</p>

<center>
<img src="/blog/assets/images/bash_menu.gif" width="40%" align="middle" />
</center>

:ET